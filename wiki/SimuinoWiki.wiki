Content:

1. Get started<br>
2. Commands<br>
3. Display<br>
4. Sketch information<br>
5. Configuration<br>
6. Scenarios<br>
7. Supported language functions<br>

--------------------------------------------------
1. Get started
--------------------------------------------------
Quick starter guide:

1. Download simuino zip-file from Google Code, project simuino

2. Unzip the file. A directory named simuino will be created.

3. Go to directory simuino. Compile: g++ -O2 -o simuino simuino.c -lncurses
   You need to have installed packages for ncurses-dev.

4. Run Simuino:  ./simuino
   Note - expand the size of your terminal !

5. If this is the first time you start Simuino. Type 'c' to enter admin-mode.
   Enter 'conf'  - the configuration is shown in the message window.
   Enter 'sketch <path + your sketch file name>'. This will be saved in the config. 

6. Enter 'load 300' . This will create simulation of 300 steps. Max steps is 2000

8. Enter 'ex' to leave admin-mode.

9. Type 'h' if you need to see avalable commands in run-mode

10. Start evaluate the simulation by stepping

Repeat step 6 - 10 if you make any changes in your sketch( i.e. logic, scenario,customized log-text)

--------------------------------------------------
2. Commands
--------------------------------------------------
Commands in Run Mode:
 s  step<br>
 r  run a loop<br>
 g  run complete simulation<br>
 a  re-run simulation<br>
 q  quit anytime, except during execution of a command<br>
 c  enter admin mode<br>
 h  show this information<br>

Commands in Admin Mode:<br>
ex               exit command mode<br>
help             show this information<br>
load             load configured sketch file<br>
run   "steps"    generate simulation of length "steps"<br>
scen             show scenario data<br>
conf             display configuration<br>
clear            delete local sketch file and simulation file<br>

sketch "file"    set sketch source file, saved in config<br>
serv   "file"    set Servuino data file, saved in config<br>
delay  "x"       set delay to x (ms), saved in config<br>
log    "x"       set log level to x (0,1,2,3), saved in config<br>
record "x"       record log to file: log.txt (1/0), saved in config<br>

--------------------------------------------------
3. Display
--------------------------------------------------
The SIMUNIO displays 4 windows

 - The Arduino board with the pin-layout<br>
 - Serial Interface<br>
 - Logs<br>
 - Messages<br>

3.1  Arduino board Window
     
     For each pin the following data will be displayed:<br>
	 Input or Output pin (in/out)<br>
	 Reading or writing  (r/w)<br>
	 Digital HIGH or LOW value (1 or 0) and values of analog pin (0 - 1023)<br>

3.2  Serial Interface

     Anything printed on this interface will be shown here.

3.3  Logs 

     Most functions in the Arduino reference library will be displayed.
     Every line has two index: loop number, pseudo-time-elapsed, i.e steps/instructions.<br>
     The log-text can be customized to be more readable for the specific appliaction, see chapter 4 below.

3.4  Message
     Used to show misc. information, such as configuration, errors,
     scenario data, etc.

--------------------------------------------------
4. Sketch information
--------------------------------------------------

Customized logging:

Add the following rows in your sketch with suitable log-text according to your specific application.

Example:<br>
// SKETCH_NAME           My_sketch_name<br>
// PINMODE_OUT        2  "your log text for pin 2"<br>
// PINMODE_IN         4  "your log text for pin 4"<br>
// DIGITALWRITE_LOW  11  "your log text for pin 11 when HIGH"<br>
// DIGITALWRITE_HIGH 11  "your log text for pin 11 when LOW"<br>
// ANALOGREAD         1  "your log text for pin 1"<br>
// DIGITALREAD       10  "your log text for pin 10"<br>
// ANALOGWRITE       14  "your log text for pin 14"<br>

This will make Simuino show your text in the log window.

--------------------------------------------------
5. Configuration
--------------------------------------------------

The following parameters are configured in the file, config.txt :

LOG_LEVEL  2		 // Level of information to be displayed during simulation (0,1,2,3)<br>
DELAY    100		 // Delay in ms between each step/instruction  (0 - 1000)<br>
LOG_FILE   0		 // Save the log information to the file: log.txt (YES=1,NO=0)<br>

--------------------------------------------------
6. Scenarios
-------------------------------------------------- 

In order to be able to run specific scenarios, controlled by values read from pins,
it is possible to specify what value shall be read per step/instruction and pin.
Only changes is needed to be specified, example:

10   123<br>
14   150<br>
20    45<br>

will generate:

10   123<br>
11   123<br>
12   123<br>
13   123<br>
14   150<br>
15   150<br>
16   150<br>
17   150<br>
18   150<br>
19   150<br>
20    45<br>
21    45<br>
 
and so on...

The scenario data is specified in your sketch-file, se example below..

Below is an example of a scenario file.
-----------------------------------------
//  digital_pins<br>
//           step 0  1  2  3  4  5  6  7  8  9 10 11 12 13<br>
//          --- -------------------------------------------<br>
// SCENDIGPIN 0   1  0  1  0  0  0  0  0  0  0  0  0  0  0<br>
// SCENDIGPIN 100 0  1  0  0  0  0  0  0  0  0  0  0  0  0<br>
// SCENDIGPIN 200 1  0  1  0  0  0  0  0  0  0  0  0  0  0<br>
// SCENDIGPIN 300 1  1  0  0  0  0  0  0  0  0  0  0  0  0<br>
//
//  analog_pins
//            step    0   1   2   3   4   5<br>
//            ------------------------------<br>
// SCENANAPIN   0    37   0   0   0   0  11 <br>
// SCENANAPIN 100    56   0   0   0   0  12 <br>
// SCENANAPIN 200     0   0   0   0   0  13 <br>
// SCENANAPIN 300   123   0   0   0   0  14 <br>
//
//  interrupts
//          step 0 1<br>
//         ----------<br>
// SCENINRPT 16  1 0<br>
// SCENINRPT 19  0 0<br>
// SCENINRPT 25  1 0<br>
// SCENINRPT 30  1 1<br>
// SCENINRPT 40  0 1<br>
// SCENINRPT 55  1 1<br>
-------------------
End of example


Note - The data has to be given in ascending step order.

--------------------------------------------------
7. Supported language functions
--------------------------------------------------
Unsupported functions are implemented with a dummy, in order to compile without errors.

Digital I/O<br>
	pinMode()		Yes<br>
	digitalWrite()		Yes<br>
	digitalRead()		Yes<br>
Analog I/O<br>
	analogReference()	No<br>
	analogRead()		Yes<br>
	analogWrite() - PWM	Yes<br>
Advanced I/O<br>
	tone()			No<br>
	noTone()		No<br>
	shiftOut()		No<br>
	shiftIn()		No<br>
	pulseIn()		No<br>
Time<br>
	millis()		Yes<br>
	micros()		Yes<br>
	delay()			Yes<br>
	delayMicroseconds()	Yes<br>
Math<br>
	min()			Yes<br>
	max()			Yes<br>
	abs()			Yes<br>
	constrain()		Yes<br>
	map()			Yes<br>
	pow()			Yes<br>
	sqrt()			Yes<br>
Trigonometry<br>
	sin()			Yes<br>
	cos()			Yes<br>
	tan()			Yes<br>
	Random Numbers		<br>
	       randomSeed()	Yes<br>
	       random()		Yes<br>
Bits and Bytes<br>
	lowByte()		No<br>
	highByte()		No<br>
	bitRead()		No<br>
	bitWrite()		No<br>
	bitSet()		No<br>
	bitClear()		No<br>
	bit()			No<br>
External Interrupts<br>
	attachInterrupt()	Yes<br>
	detachInterrupt()	Yes<br>
Interrupts<br>
	interrupts()		No<br>	
	noInterrupts()		No<br>
Communication<br>
	Serial			<br>
		begin()		Yes<br>
		end()		Yes<br>
		available()	No<br>
		read()		No<br>
		peek()		No<br>
		flush()		Yes<br>
		print()		Yes<br>
		println()	Yes<br>
		write()		Yes<br>