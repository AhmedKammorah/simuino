Below is a copy of the README.txt

==================================================
SIMUINO is a Arduino Simulator. Simple and basic. 
Code: c++
Platform: Linux (Ubuntu)
Version: 0.9.2

Developed by Benny Saxen, ADCAJO
==================================================


--------------------------------------------------
1. Get started
--------------------------------------------------
Quick starter guide:

1. Download simuino zip-file from Google Code, project simuino

2. Unzip the file. A directory named simuino will be created.

3. Go to directory simuino. Compile: g++ -O2 -o simuino simuino.c -lncurses
   You need to have installed packages for ncurses-dev.

4. Run: ./simuino     
   The setup() function will be executed and halt before loop().
   Make sure the size of your terminal window is big enough. 

5. Press "r" to run one loop() sequence. Can be repeated. 
   Press "s" to step one instruction within a loop.
   Press "g" to complete a loop or run all loops defined in a scenario.
   
6. Quit:  press "q". Works only on loop-level, i e the loop has to be completed.


Test your own sketch in simuino:

1. Copy your sketch (pde-file) to directory/file "simuino/sketch/sketch.pde"

2. Compile "g++ -O2 -o simuino simuino.c -lncurses"

3. Run: ./simuino    



--------------------------------------------------
2. Commands
--------------------------------------------------
Available commands:

q    quit
r    run one loop() sequence
s    step one instruction
g    run complete scenario, according to the content in scenario/digitalPins.txt and analogPins.txt


--------------------------------------------------
3. Input
-------------------------------------------------- 

In order to be able to run specific scenarios, controlled by values read from pins,
it is possible to specify what value shall be read per step/instruction and pin.
Only changes is needed to be specified, example:

10   123
14   150
20    45

will generate:

10   123
11   123
12   123
13   123
14   150
15   150
16   150
17   150
18   150
19   150
20    45
21    45
 
and so on...

The scenario file, scenario.txt is located in the subdirectory "scenario".

Below is an example of a scenario file.
-----------------------------------------

#  Simuino scenario file
# start_digital_pins
#   0  1  2  3  4  5  6  7  8  9 10 11 12 13
#-------------------------------------------
0   1  0  1  0  0  0  0  0  0  0  0  0  0  0
100 0  1  0  0  0  0  0  0  0  0  0  0  0  0
200 1  0  1  0  0  0  0  0  0  0  0  0  0  0
300 1  1  0  0  0  0  0  0  0  0  0  0  0  0
# end_digital_pins
# start_analog_pins
#     0   1   2   3   4   5
#--------------------------
0    37   0   0   0   0   0 
100  56   0   0   0   0   0 
200   0   0   0   0   0   0 
300 123   0   0   0   0   0 
# end_analog pins
# start_interrupts
#  0 1
#-----
16 1 0
19 0 0
25 1 0
30 1 1
40 0 1
55 1 1
# end_interrupts

-------------------
End of example


Note - Simuino is uses the tags: start_  end_  for reading correct values from the file.

--------------------------------------------------
4. Display
--------------------------------------------------
The SIMUNIO displayes 4 windows:

 - The Arduino board with the pin-layout
 - Serial Interface
 - Logs
 - Messages

4.1  Arduino board Window
     
     For each pin the following data will be displayed:
	 Input or Output pin (in/out)
	 Reading or writing  (r/w)
	 Digital HIGH or LOW value (5 or 0) and values of analog pin (0 - 1023)

4.2  Serial Interface

     Anything printed on this interface will be shown here.

4.3  Logs 

     Most functions in the Arduino reference library will be displayed.
     Every line has two index: loop number, pseudo-time-elapsed, i.e steps/instructions.
     The log-text can be customized to be more readable for the specific appliaction, see chapter 6 below.

4.4  Message

     Shows any error messages and length (no of loops) of scenario.

--------------------------------------------------
5. Supported Language Functions
--------------------------------------------------
Unsupported functions are implemented with a dummy, in order to compile without errors.

Digital I/O
	pinMode()		Yes
	digitalWrite()		Yes
	digitalRead()		Yes
Analog I/O
	analogReference()	No
	analogRead()		Yes
	analogWrite() - PWM	Yes
Advanced I/O
	tone()			No
	noTone()		No
	shiftOut()		No
	shiftIn()		No
	pulseIn()		No
Time
	millis()		Yes
	micros()		Yes
	delay()			Yes
	delayMicroseconds()	Yes
Math
	min()			Yes
	max()			Yes
	abs()			Yes
	constrain()		Yes
	map()			Yes
	pow()			Yes
	sqrt()			Yes
Trigonometry
	sin()			Yes
	cos()			Yes
	tan()			Yes
	Random Numbers		
	       randomSeed()	Yes
	       random()		Yes
Bits and Bytes
	lowByte()		No
	highByte()		No
	bitRead()		No
	bitWrite()		No
	bitSet()		No
	bitClear()		No
	bit()			No
External Interrupts
	attachInterrupt()	Yes
	detachInterrupt()	Yes
Interrupts
	interrupts()		No	
	noInterrupts()		No
Communication
	Serial			
		begin()		Yes
		end()		Yes
		available()	No
		read()		No
		peek()		No
		flush()		Yes
		print()		Yes
		println()	Yes
		write()		Yes
--------------------------------------------------
6. Sketch information
--------------------------------------------------

If your sketch code contains a row:  // simuino: your_application_name
the name of your application is displayed in the middle of the board.

Customized logging:

Add the following rows in your sketch with suitable log-text according to your specific sketch.

Example:

// PINMODE_OUT        2  "your log text for pin 2"
// PINMODE_IN         4  "your log text for pin 4"
// DIGITALWRITE_LOW  11  "your log text for pin 11 when HIGH"
// DIGITALWRITE_HIGH 11  "your log text for pin 11 when LOW"
// ANALOGREAD         1  "your log text for pin 1"
// DIGITALREAD       10  "your log text for pin 10"
// ANALOGWRITE       14  "your log text for pin 14"

--------------------------------------------------
7. Configuration
--------------------------------------------------

The following parameters are configured in the file, config.txt :

LOG_LEVEL  1		 // Level of information to be displayed during simulation (0,1,2,3)
DELAY    100		 // Delay in ms between each step/instruction
LOG_FILE   0		 // Save the log information to the file: log.txt (YES=1,NO=0)
--------------------------------------------------
End of README
--------------------------------------------------